// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, name FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const updateUserNameById = `-- name: UpdateUserNameById :one
UPDATE users SET name = $2, updated_at = $3 WHERE id = $1
RETURNING id, created_at, updated_at, name
`

type UpdateUserNameByIdParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateUserNameById(ctx context.Context, arg UpdateUserNameByIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserNameById, arg.ID, arg.Name, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const userExistsById = `-- name: UserExistsById :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = $1) AS exists
`

func (q *Queries) UserExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
